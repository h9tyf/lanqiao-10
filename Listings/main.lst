C51 COMPILER V9.60.0.0   MAIN                                                              04/13/2021 21:48:24 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OMF2 OPTIMIZE(8,SPEED) BROWSE DEBUG PRINT(.\Listings\main.lst) TA
                    -BS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "var.h"
   2          #include "ds1302.h"
   3          #include "iic.h"
   4          #include "onewire.h"
   5          
   6          u8 debug;
   7          u8 show_num = 151;
   8          
   9          long SysTick;
  10          
  11          u8 digital_tube[8] = {1, 2, 3, 4, 5, 6, 7, 8};
  12          u8 tab[] = {0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xf8, 0x80, 0x90, 0xff, 0xc1, 0x8e};
  13                        //0     1     2     3     4     5     6     7     8     9   OFF   U   F
  14          
  15          enum SHOW show_state = VOL;
  16          enum DAC_MODE dac_mode = V2;
  17          u8 led_state = 1;// initial on
  18          u8 digital_tube_state = 1;//initial on
  19          
  20          u8 dac_v100;
  21          unsigned int fre_count1;
  22          unsigned int fre_count2;
  23          unsigned int fre;
  24          
  25          void LatchControl(u8 num, u8 value)
  26          {
  27   1        P0 = value;
  28   1        _nop_();
  29   1        P2 = (num << 5) | 0x1f;
  30   1        _nop_();
  31   1        P2 &= 0x1f;
  32   1        _nop_();
  33   1      }
  34          
  35          u8 index;
  36          void func() interrupt 3
  37          {
  38   1        u8 value;
  39   1        SysTick++;
  40   1        
  41   1        LatchControl(7, tab[OFF]);
  42   1        LatchControl(6, 1<<index);
  43   1        value = tab[digital_tube[index]];
  44   1        if(index == 5 && show_state == VOL && digital_tube_state == 1){
  45   2          value &= 0x7f;
  46   2        }
  47   1        LatchControl(7, value);
  48   1        index = (index + 1)%8;
  49   1        
  50   1      }
  51          
  52          void Timer1Init(void)   //1??@12.000MHz
  53          {
  54   1        AUXR |= 0x40;   //?????1T??
C51 COMPILER V9.60.0.0   MAIN                                                              04/13/2021 21:48:24 PAGE 2   

  55   1        TMOD &= 0x0F;   //???????
  56   1        TL1 = 0x20;   //??????
  57   1        TH1 = 0xD1;   //??????
  58   1        TF1 = 0;    //??TF1??
  59   1        TR1 = 1;    //???1????
  60   1      }
  61          
  62          void Timer0Init(void)   //1??@12.000MHz
  63          {
  64   1        AUXR |= 0x80;   //?????1T??
  65   1        TMOD &= 0xF0;   //???????
  66   1        TMOD |= 0x04;
  67   1        TL0 = 0;    //??????
  68   1        TH0 = 0;    //??????
  69   1        TF0 = 0;    //??TF1??
  70   1        TR0 = 1;    //???1????
  71   1      }
  72          
  73          
  74          void get_vrb2()
  75          {
  76   1        long temp;
  77   1        IIC_Start();
  78   1        IIC_SendByte(0x90);
  79   1        IIC_WaitAck();
  80   1        IIC_SendByte(0x43);
  81   1        IIC_WaitAck();
  82   1        IIC_Start();
  83   1        IIC_SendByte(0x91);
  84   1        IIC_WaitAck();
  85   1        temp = IIC_RecByte();
  86   1        IIC_Ack(0);
  87   1        IIC_Stop();
  88   1        
  89   1        dac_v100 = temp * 500 / 256 ;
  90   1        //dac_v100 = temp;
  91   1      }
  92          
  93          //change output of dac
  94          void change_output_v()
  95          {
  96   1        u8 out_v;
  97   1        if(dac_mode == V2){
  98   2          out_v = 2 / 5 * 256;
  99   2        } else {
 100   2          out_v = dac_v100 / 100 / 5 * 256;
 101   2        }
 102   1        IIC_Start();
 103   1        IIC_SendByte(0x90);
 104   1        IIC_WaitAck();
 105   1        IIC_SendByte(0x43);
 106   1        IIC_WaitAck();
 107   1        IIC_SendByte(out_v);
 108   1        IIC_WaitAck();
 109   1        IIC_Stop();
 110   1      }
 111          
 112          //get fre of ne555
 113          void get_fre()
 114          {
 115   1        
 116   1        fre_count1 = fre_count2;
C51 COMPILER V9.60.0.0   MAIN                                                              04/13/2021 21:48:24 PAGE 3   

 117   1        fre_count2 = (TH0 << 8) | TL0;
 118   1        fre = fre_count2 - fre_count1;
 119   1      }
 120          
 121          void change_state()
 122          {
 123   1        check_button();
 124   1        respond_to_button();
 125   1      }
 126          
 127          void main()
 128          {
 129   1        Timer0Init();
 130   1        Timer1Init();
 131   1        EA = 1;
 132   1        ET1 = 1;
 133   1        P3 |= 0x0f;
 134   1        LatchControl(4, 0xff);
 135   1        debug = 0;
 136   1        
 137   1        while(1){
 138   2          long tickBkp = SysTick;
 139   2          
 140   2          if(tickBkp % 2 == 0){
 141   3            EA = 0;
 142   3            change_state();
 143   3            EA = 1;
 144   3          }
 145   2          
 146   2          if(tickBkp % 10 == 0){
 147   3            EA = 0;
 148   3            get_vrb2();
 149   3            //change_output_v();
 150   3            EA = 1;
 151   3          }
 152   2          
 153   2          if(tickBkp % 1000 == 0){
 154   3            EA = 0;
 155   3            get_fre();
 156   3            EA = 1;
 157   3          }
 158   2          
 159   2          if(tickBkp % 2 == 0){
 160   3            EA = 0;
 161   3            change_show();
 162   3            EA = 1;
 163   3          }
 164   2          
 165   2          
 166   2          
 167   2          while(tickBkp == SysTick);
 168   2        }
 169   1        
 170   1        
 171   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    555    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
C51 COMPILER V9.60.0.0   MAIN                                                              04/13/2021 21:48:24 PAGE 4   

   DATA SIZE        =     39       9
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
